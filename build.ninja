rule quicktype-rust
  command = pwsh -Command "quicktype --src-lang schema --lang rust --visibility public --out $out $in"

rule quicktype-typescript
  command = pwsh -Command "quicktype --src-lang schema --lang typescript --out $out $in"

rule deno-compile
  command = deno compile --allow-all --output $out $in

rule deno-lint
  command = deno lint
build deno-lint: deno-lint typescript-sources

rule deno-check
  command = deno check
build deno-check: deno-check typescript-sources

build rust-sources: phony json-schema/rust/src/lib.rs
build json-schema/rust/src/lib.rs: quicktype-rust json-schema/schema/Output.json json-schema/schema/ProductMetric.json

build typescript-sources: phony json-schema/typescript/index.ts
build json-schema/typescript/index.ts: quicktype-typescript json-schema/schema/Output.json json-schema/schema/ProductMetric.json

rule prettier
  command = pwsh -Command "prettier --write **/*.yaml **/*.md **/*.json **/*.ts"
build prettier: prettier

rule cargo-fmt
  command = cargo fmt
build cargo-fmt: cargo-fmt rust-sources

rule clippy
  command = cargo clippy --all-targets --all-features
build clippy: clippy rust-sources

rule cargo-test
  command = cargo test
build cargo-test: cargo-test rust-sources

rule cargo-install
  command = cargo install --path stock-ranker
build cargo-install: cargo-install rust-sources

build ./stock-metric-collector/build/stock-metric-collector: deno-compile stock-metric-collector/src/main.ts
build deno-compile: phony ./stock-metric-collector/build/stock-metric-collector

# Main entry points
build init: phony rust-sources typescript-sources
build format: phony prettier cargo-fmt
build verify: phony clippy cargo-test deno-check deno-lint
build install: phony cargo-install deno-compile
